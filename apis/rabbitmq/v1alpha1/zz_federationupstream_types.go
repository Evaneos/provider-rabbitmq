// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DefinitionInitParameters struct {

	// Determines how the link should acknowledge messages. Valid values are on-confirm, on-publish, and no-ack. Default is on-confirm.
	AckMode *string `json:"ackMode,omitempty" tf:"ack_mode,omitempty"`

	// The name of the upstream exchange.
	Exchange *string `json:"exchange,omitempty" tf:"exchange,omitempty"`

	// The expiry time (in milliseconds) after which an upstream queue for a federated exchange may be deleted if a connection to the upstream is lost.
	Expires *float64 `json:"expires,omitempty" tf:"expires,omitempty"`

	// Maximum number of federation links that messages can traverse before being dropped. Default is 1.
	MaxHops *float64 `json:"maxHops,omitempty" tf:"max_hops,omitempty"`

	// The expiry time (in milliseconds) for messages in the upstream queue for a federated exchange (see expires).
	MessageTTL *float64 `json:"messageTtl,omitempty" tf:"message_ttl,omitempty"`

	// Maximum number of unacknowledged messages that may be in flight over a federation link at one time. Default is 1000.
	PrefetchCount *float64 `json:"prefetchCount,omitempty" tf:"prefetch_count,omitempty"`

	// The name of the upstream queue.
	Queue *string `json:"queue,omitempty" tf:"queue,omitempty"`

	// Time in seconds to wait after a network link goes down before attempting reconnection. Default is 5.
	ReconnectDelay *float64 `json:"reconnectDelay,omitempty" tf:"reconnect_delay,omitempty"`

	// Determines how federation should interact with the validated user-id feature. Default is false.
	TrustUserID *bool `json:"trustUserId,omitempty" tf:"trust_user_id,omitempty"`

	// The AMQP URI(s) for the upstream. Note that the URI may contain sensitive information, such as a password.
	URISecretRef v1.SecretKeySelector `json:"uriSecretRef" tf:"-"`
}

type DefinitionObservation struct {

	// Determines how the link should acknowledge messages. Valid values are on-confirm, on-publish, and no-ack. Default is on-confirm.
	AckMode *string `json:"ackMode,omitempty" tf:"ack_mode,omitempty"`

	// The name of the upstream exchange.
	Exchange *string `json:"exchange,omitempty" tf:"exchange,omitempty"`

	// The expiry time (in milliseconds) after which an upstream queue for a federated exchange may be deleted if a connection to the upstream is lost.
	Expires *float64 `json:"expires,omitempty" tf:"expires,omitempty"`

	// Maximum number of federation links that messages can traverse before being dropped. Default is 1.
	MaxHops *float64 `json:"maxHops,omitempty" tf:"max_hops,omitempty"`

	// The expiry time (in milliseconds) for messages in the upstream queue for a federated exchange (see expires).
	MessageTTL *float64 `json:"messageTtl,omitempty" tf:"message_ttl,omitempty"`

	// Maximum number of unacknowledged messages that may be in flight over a federation link at one time. Default is 1000.
	PrefetchCount *float64 `json:"prefetchCount,omitempty" tf:"prefetch_count,omitempty"`

	// The name of the upstream queue.
	Queue *string `json:"queue,omitempty" tf:"queue,omitempty"`

	// Time in seconds to wait after a network link goes down before attempting reconnection. Default is 5.
	ReconnectDelay *float64 `json:"reconnectDelay,omitempty" tf:"reconnect_delay,omitempty"`

	// Determines how federation should interact with the validated user-id feature. Default is false.
	TrustUserID *bool `json:"trustUserId,omitempty" tf:"trust_user_id,omitempty"`
}

type DefinitionParameters struct {

	// Determines how the link should acknowledge messages. Valid values are on-confirm, on-publish, and no-ack. Default is on-confirm.
	// +kubebuilder:validation:Optional
	AckMode *string `json:"ackMode,omitempty" tf:"ack_mode,omitempty"`

	// The name of the upstream exchange.
	// +kubebuilder:validation:Optional
	Exchange *string `json:"exchange,omitempty" tf:"exchange,omitempty"`

	// The expiry time (in milliseconds) after which an upstream queue for a federated exchange may be deleted if a connection to the upstream is lost.
	// +kubebuilder:validation:Optional
	Expires *float64 `json:"expires,omitempty" tf:"expires,omitempty"`

	// Maximum number of federation links that messages can traverse before being dropped. Default is 1.
	// +kubebuilder:validation:Optional
	MaxHops *float64 `json:"maxHops,omitempty" tf:"max_hops,omitempty"`

	// The expiry time (in milliseconds) for messages in the upstream queue for a federated exchange (see expires).
	// +kubebuilder:validation:Optional
	MessageTTL *float64 `json:"messageTtl,omitempty" tf:"message_ttl,omitempty"`

	// Maximum number of unacknowledged messages that may be in flight over a federation link at one time. Default is 1000.
	// +kubebuilder:validation:Optional
	PrefetchCount *float64 `json:"prefetchCount,omitempty" tf:"prefetch_count,omitempty"`

	// The name of the upstream queue.
	// +kubebuilder:validation:Optional
	Queue *string `json:"queue,omitempty" tf:"queue,omitempty"`

	// Time in seconds to wait after a network link goes down before attempting reconnection. Default is 5.
	// +kubebuilder:validation:Optional
	ReconnectDelay *float64 `json:"reconnectDelay,omitempty" tf:"reconnect_delay,omitempty"`

	// Determines how federation should interact with the validated user-id feature. Default is false.
	// +kubebuilder:validation:Optional
	TrustUserID *bool `json:"trustUserId,omitempty" tf:"trust_user_id,omitempty"`

	// The AMQP URI(s) for the upstream. Note that the URI may contain sensitive information, such as a password.
	// +kubebuilder:validation:Optional
	URISecretRef v1.SecretKeySelector `json:"uriSecretRef" tf:"-"`
}

type FederationUpstreamInitParameters struct {

	// The configuration of the federation upstream. The structure is described below.
	Definition []DefinitionInitParameters `json:"definition,omitempty" tf:"definition,omitempty"`

	// The name of the federation upstream.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=github.com/evaneos/provider-rabbitmq/apis/rabbitmq/v1alpha1.Vhost
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

type FederationUpstreamObservation struct {

	// (Computed) Set to federation-upstream by the underlying RabbitMQ provider. You do not set this attribute but will see it in state and plan output.
	Component *string `json:"component,omitempty" tf:"component,omitempty"`

	// The configuration of the federation upstream. The structure is described below.
	Definition []DefinitionObservation `json:"definition,omitempty" tf:"definition,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the federation upstream.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The vhost to create the resource in.
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type FederationUpstreamParameters struct {

	// The configuration of the federation upstream. The structure is described below.
	// +kubebuilder:validation:Optional
	Definition []DefinitionParameters `json:"definition,omitempty" tf:"definition,omitempty"`

	// The name of the federation upstream.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=github.com/evaneos/provider-rabbitmq/apis/rabbitmq/v1alpha1.Vhost
	// +kubebuilder:validation:Optional
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

// FederationUpstreamSpec defines the desired state of FederationUpstream
type FederationUpstreamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FederationUpstreamParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FederationUpstreamInitParameters `json:"initProvider,omitempty"`
}

// FederationUpstreamStatus defines the observed state of FederationUpstream.
type FederationUpstreamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FederationUpstreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FederationUpstream is the Schema for the FederationUpstreams API. Creates and manages a federation upstream on a RabbitMQ server.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rabbitmq}
type FederationUpstream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.definition) || (has(self.initProvider) && has(self.initProvider.definition))",message="spec.forProvider.definition is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   FederationUpstreamSpec   `json:"spec"`
	Status FederationUpstreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FederationUpstreamList contains a list of FederationUpstreams
type FederationUpstreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FederationUpstream `json:"items"`
}

// Repository type metadata.
var (
	FederationUpstream_Kind             = "FederationUpstream"
	FederationUpstream_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FederationUpstream_Kind}.String()
	FederationUpstream_KindAPIVersion   = FederationUpstream_Kind + "." + CRDGroupVersion.String()
	FederationUpstream_GroupVersionKind = CRDGroupVersion.WithKind(FederationUpstream_Kind)
)

func init() {
	SchemeBuilder.Register(&FederationUpstream{}, &FederationUpstreamList{})
}
