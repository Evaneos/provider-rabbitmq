// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyInitParameters_2 struct {

	// The name of the policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The settings of the policy. The structure is
	// described below.
	Policy []PolicyPolicyInitParameters `json:"policy,omitempty" tf:"policy,omitempty"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=github.com/evaneos/provider-rabbitmq/apis/rabbitmq/v1alpha1.Vhost
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

type PolicyObservation_2 struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The settings of the policy. The structure is
	// described below.
	Policy []PolicyPolicyObservation `json:"policy,omitempty" tf:"policy,omitempty"`

	// The vhost to create the resource in.
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type PolicyParameters_2 struct {

	// The name of the policy.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The settings of the policy. The structure is
	// described below.
	// +kubebuilder:validation:Optional
	Policy []PolicyPolicyParameters `json:"policy,omitempty" tf:"policy,omitempty"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=github.com/evaneos/provider-rabbitmq/apis/rabbitmq/v1alpha1.Vhost
	// +kubebuilder:validation:Optional
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

type PolicyPolicyInitParameters struct {

	// Can either be "exchanges", "queues", or "all".
	ApplyTo *string `json:"applyTo,omitempty" tf:"apply_to,omitempty"`

	// Key/value pairs of the policy definition. See the
	// RabbitMQ documentation for definition references and examples.
	// +mapType=granular
	Definition map[string]*string `json:"definition,omitempty" tf:"definition,omitempty"`

	// A pattern to match an exchange or queue name.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// The policy with the greater priority is applied first.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type PolicyPolicyObservation struct {

	// Can either be "exchanges", "queues", or "all".
	ApplyTo *string `json:"applyTo,omitempty" tf:"apply_to,omitempty"`

	// Key/value pairs of the policy definition. See the
	// RabbitMQ documentation for definition references and examples.
	// +mapType=granular
	Definition map[string]*string `json:"definition,omitempty" tf:"definition,omitempty"`

	// A pattern to match an exchange or queue name.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// The policy with the greater priority is applied first.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type PolicyPolicyParameters struct {

	// Can either be "exchanges", "queues", or "all".
	// +kubebuilder:validation:Optional
	ApplyTo *string `json:"applyTo" tf:"apply_to,omitempty"`

	// Key/value pairs of the policy definition. See the
	// RabbitMQ documentation for definition references and examples.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Definition map[string]*string `json:"definition" tf:"definition,omitempty"`

	// A pattern to match an exchange or queue name.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern" tf:"pattern,omitempty"`

	// The policy with the greater priority is applied first.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority" tf:"priority,omitempty"`
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyInitParameters_2 `json:"initProvider,omitempty"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Policy is the Schema for the Policys API. Creates and manages a policy on a RabbitMQ server.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rabbitmq}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policy) || (has(self.initProvider) && has(self.initProvider.policy))",message="spec.forProvider.policy is a required parameter"
	Spec   PolicySpec   `json:"spec"`
	Status PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
