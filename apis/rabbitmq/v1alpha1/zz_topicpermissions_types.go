// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TopicPermissionsInitParameters struct {

	// The settings of the permissions. The structure is
	// described below.
	Permissions []TopicPermissionsPermissionsInitParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The user to apply the permissions to.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=github.com/evaneos/provider-rabbitmq/apis/rabbitmq/v1alpha1.Vhost
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

type TopicPermissionsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The settings of the permissions. The structure is
	// described below.
	Permissions []TopicPermissionsPermissionsObservation `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The user to apply the permissions to.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The vhost to create the resource in.
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type TopicPermissionsParameters struct {

	// The settings of the permissions. The structure is
	// described below.
	// +kubebuilder:validation:Optional
	Permissions []TopicPermissionsPermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The user to apply the permissions to.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=github.com/evaneos/provider-rabbitmq/apis/rabbitmq/v1alpha1.Vhost
	// +kubebuilder:validation:Optional
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

type TopicPermissionsPermissionsInitParameters struct {

	// The exchange to set the permissions for.
	Exchange *string `json:"exchange,omitempty" tf:"exchange,omitempty"`

	// The "read" ACL.
	Read *string `json:"read,omitempty" tf:"read,omitempty"`

	// The "write" ACL.
	Write *string `json:"write,omitempty" tf:"write,omitempty"`
}

type TopicPermissionsPermissionsObservation struct {

	// The exchange to set the permissions for.
	Exchange *string `json:"exchange,omitempty" tf:"exchange,omitempty"`

	// The "read" ACL.
	Read *string `json:"read,omitempty" tf:"read,omitempty"`

	// The "write" ACL.
	Write *string `json:"write,omitempty" tf:"write,omitempty"`
}

type TopicPermissionsPermissionsParameters struct {

	// The exchange to set the permissions for.
	// +kubebuilder:validation:Optional
	Exchange *string `json:"exchange" tf:"exchange,omitempty"`

	// The "read" ACL.
	// +kubebuilder:validation:Optional
	Read *string `json:"read" tf:"read,omitempty"`

	// The "write" ACL.
	// +kubebuilder:validation:Optional
	Write *string `json:"write" tf:"write,omitempty"`
}

// TopicPermissionsSpec defines the desired state of TopicPermissions
type TopicPermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TopicPermissionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TopicPermissionsInitParameters `json:"initProvider,omitempty"`
}

// TopicPermissionsStatus defines the observed state of TopicPermissions.
type TopicPermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TopicPermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TopicPermissions is the Schema for the TopicPermissionss API. Creates and manages a user's topic permissions on a RabbitMQ server.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rabbitmq}
type TopicPermissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissions) || (has(self.initProvider) && has(self.initProvider.permissions))",message="spec.forProvider.permissions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.user) || (has(self.initProvider) && has(self.initProvider.user))",message="spec.forProvider.user is a required parameter"
	Spec   TopicPermissionsSpec   `json:"spec"`
	Status TopicPermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TopicPermissionsList contains a list of TopicPermissionss
type TopicPermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TopicPermissions `json:"items"`
}

// Repository type metadata.
var (
	TopicPermissions_Kind             = "TopicPermissions"
	TopicPermissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TopicPermissions_Kind}.String()
	TopicPermissions_KindAPIVersion   = TopicPermissions_Kind + "." + CRDGroupVersion.String()
	TopicPermissions_GroupVersionKind = CRDGroupVersion.WithKind(TopicPermissions_Kind)
)

func init() {
	SchemeBuilder.Register(&TopicPermissions{}, &TopicPermissionsList{})
}
