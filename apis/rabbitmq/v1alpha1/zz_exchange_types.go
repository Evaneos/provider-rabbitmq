// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExchangeInitParameters struct {

	// The name of the exchange.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The settings of the exchange. The structure is
	// described below.
	Settings []SettingsInitParameters `json:"settings,omitempty" tf:"settings,omitempty"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=github.com/evaneos/provider-rabbitmq/apis/rabbitmq/v1alpha1.Vhost
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

type ExchangeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the exchange.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The settings of the exchange. The structure is
	// described below.
	Settings []SettingsObservation `json:"settings,omitempty" tf:"settings,omitempty"`

	// The vhost to create the resource in.
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type ExchangeParameters struct {

	// The name of the exchange.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The settings of the exchange. The structure is
	// described below.
	// +kubebuilder:validation:Optional
	Settings []SettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=github.com/evaneos/provider-rabbitmq/apis/rabbitmq/v1alpha1.Vhost
	// +kubebuilder:validation:Optional
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a Vhost in rabbitmq to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

type SettingsInitParameters struct {

	// Additional key/value settings for the exchange.
	// +mapType=granular
	Arguments map[string]*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// Whether the exchange will self-delete when all
	// queues have finished using it.
	AutoDelete *bool `json:"autoDelete,omitempty" tf:"auto_delete,omitempty"`

	// Whether the exchange survives server restarts.
	// Defaults to false.
	Durable *bool `json:"durable,omitempty" tf:"durable,omitempty"`

	// The type of exchange.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SettingsObservation struct {

	// Additional key/value settings for the exchange.
	// +mapType=granular
	Arguments map[string]*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// Whether the exchange will self-delete when all
	// queues have finished using it.
	AutoDelete *bool `json:"autoDelete,omitempty" tf:"auto_delete,omitempty"`

	// Whether the exchange survives server restarts.
	// Defaults to false.
	Durable *bool `json:"durable,omitempty" tf:"durable,omitempty"`

	// The type of exchange.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SettingsParameters struct {

	// Additional key/value settings for the exchange.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Arguments map[string]*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// Whether the exchange will self-delete when all
	// queues have finished using it.
	// +kubebuilder:validation:Optional
	AutoDelete *bool `json:"autoDelete,omitempty" tf:"auto_delete,omitempty"`

	// Whether the exchange survives server restarts.
	// Defaults to false.
	// +kubebuilder:validation:Optional
	Durable *bool `json:"durable,omitempty" tf:"durable,omitempty"`

	// The type of exchange.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// ExchangeSpec defines the desired state of Exchange
type ExchangeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExchangeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ExchangeInitParameters `json:"initProvider,omitempty"`
}

// ExchangeStatus defines the observed state of Exchange.
type ExchangeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExchangeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Exchange is the Schema for the Exchanges API. Creates and manages an exchange on a RabbitMQ server.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rabbitmq}
type Exchange struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.settings) || (has(self.initProvider) && has(self.initProvider.settings))",message="spec.forProvider.settings is a required parameter"
	Spec   ExchangeSpec   `json:"spec"`
	Status ExchangeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExchangeList contains a list of Exchanges
type ExchangeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Exchange `json:"items"`
}

// Repository type metadata.
var (
	Exchange_Kind             = "Exchange"
	Exchange_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Exchange_Kind}.String()
	Exchange_KindAPIVersion   = Exchange_Kind + "." + CRDGroupVersion.String()
	Exchange_GroupVersionKind = CRDGroupVersion.WithKind(Exchange_Kind)
)

func init() {
	SchemeBuilder.Register(&Exchange{}, &ExchangeList{})
}
